package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class HashEquiJoin extends Operator {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */

    /*My Implementation Start*/
    private JoinPredicate joinPredicate;
    private DbIterator child1;
    private DbIterator child2;
    private TupleDesc mergedTupleDesc;
    private ArrayList<Tuple> joinedArray;
    private HashMap<Field, ArrayList<Tuple>> assistChild2HashMap;
    /*My Implementation End*/

    transient Iterator<Tuple> listIt = null;

    public HashEquiJoin(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
        this.joinPredicate = p;
        this.child1 = child1;
        this.child2 = child2;
        this.mergedTupleDesc = TupleDesc.merge(this.child1.getTupleDesc(), this.child2.getTupleDesc());
        this.joinedArray = new ArrayList<Tuple>();
        this.assistChild2HashMap = new HashMap<Field, ArrayList<Tuple>>();
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.joinPredicate;
    }

    public TupleDesc getTupleDesc() {
        // some code goes here
        return this.mergedTupleDesc;
    }
    
    public String getJoinField1Name()
    {
        // some code goes here
	    return this.child1.getTupleDesc().getFieldName(this.joinPredicate.getField1());
    }

    public String getJoinField2Name()
    {
        // some code goes here
        return this.child2.getTupleDesc().getFieldName(this.joinPredicate.getField2());
    }
    
    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        super.open();
        this.child1.open();
        this.child2.open();
        int child1Index = this.joinPredicate.getField1();
        int child2Index = this.joinPredicate.getField2();
        int lenLeftTuple = child1.getTupleDesc().getLength();
        int lenRightTuple = child2.getTupleDesc().getLength();
        while (child2.hasNext())
        {
            Tuple tmpTuple2 = child2.next();
            Field tmpField2 = tmpTuple2.getField(child2Index);
            if (!this.assistChild2HashMap.containsKey(tmpField2))
            {
                ArrayList<Tuple> tupleArray = new ArrayList<Tuple>();
                tupleArray.add(tmpTuple2);
                this.assistChild2HashMap.put(tmpField2, tupleArray);
            }
            else
            {
                this.assistChild2HashMap.get(tmpField2).add(tmpTuple2);
            }
        }
        while (child1.hasNext())
        {
            Tuple tmpLeft = child1.next();
            Field tmpField1 = tmpLeft.getField(child1Index);
            for (Field keyFiled : this.assistChild2HashMap.keySet())
            {
                if (this.joinPredicate.filterByFiled(tmpField1, keyFiled))
                {
                    ArrayList<Tuple> joinedArray = this.assistChild2HashMap.get(keyFiled);
                    for (Tuple tmpRight : joinedArray)
                    {
                        Tuple joinedTuple = new Tuple(this.mergedTupleDesc);
                        for (int i = 0; i < lenLeftTuple; i++)
                        {
                            joinedTuple.setField(i, tmpLeft.getField(i));
                        }
                        for (int i = 0; i < lenRightTuple; i++)
                        {
                            joinedTuple.setField(i + lenLeftTuple, tmpRight.getField(i));
                        }
                        this.joinedArray.add(joinedTuple);
                    }
                }
            }
        }
        this.listIt = this.joinedArray.iterator();
    }

    public void close() {
        // some code goes here
        this.assistChild2HashMap.clear();
        this.joinedArray.clear();
        this.child1.close();
        this.child2.close();
        super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        this.close();
        this.open();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, there will be two copies of the join attribute in
     * the results. (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        if (listIt.hasNext())
        {
            return listIt.next();
        }
        return null;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        DbIterator[] children = new DbIterator[2];
        children[0] = child1;
        children[1] = child2;
        return children;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
        this.child1 = children[0];
        this.child2 = children[1];
    }
    
}
